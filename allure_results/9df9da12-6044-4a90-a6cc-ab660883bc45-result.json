{"name": "test_case01", "status": "broken", "statusDetails": {"message": "RuntimeError: call depth exceed 4", "trace": "self = <wda.Client object at 0x109f159a0>, method = 'POST', urlpath = '/wda/apps/terminate', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, with_session = True, timeout = None\n\n    @limit_call_depth(4)\n    def _fetch(self,\n               method: str,\n               urlpath: str,\n               data: Optional[dict] = None,\n               with_session: bool = False,\n               timeout: Optional[float] = None) -> attrdict.AttrDict:\n        \"\"\" do http request \"\"\"\n        urlpath = \"/\" + urlpath.lstrip(\"/\")  # urlpath always startswith /\n    \n        callbacks = self.__callbacks\n    \n        if self.__callback_running:\n            callbacks = None\n    \n        url = urljoin(self.__wda_url, urlpath)\n    \n        run_callback = functools.partial(self._run_callback,\n                                         callbacks=callbacks,\n                                         method=method,\n                                         url=url,\n                                         urlpath=urlpath,\n                                         with_session=with_session,\n                                         data=data,\n                                         client=self)\n    \n        try:\n            if with_session:\n                url = urljoin(self.__wda_url, \"session\", self.session_id,\n                              urlpath)\n            run_callback(Callback.HTTP_REQUEST_BEFORE)\n>           response = httpdo(url, method, data, timeout)\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:454: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http+usbmux://00008030-001024CC0E89802E:8100/session/4464FF9C-A530-4A33-BD50-9A2668F109FD/wda/apps/terminate', method = 'POST', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, timeout = None\n\n    def httpdo(url, method=\"GET\", data=None, timeout=None) -> attrdict.AttrDict:\n        \"\"\"\n        thread safe http request\n    \n        Raises:\n            WDAError, WDARequestError, WDAEmptyResponseError\n        \"\"\"\n        p = urlparse(url)\n        with namedlock(p.scheme + \"://\" + p.netloc):\n>           return _unsafe_httpdo(url, method, data, timeout)\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http+usbmux://00008030-001024CC0E89802E:8100/session/4464FF9C-A530-4A33-BD50-9A2668F109FD/wda/apps/terminate', method = 'POST', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, timeout = 180.0\n\n    def _unsafe_httpdo(url, method='GET', data=None, timeout=None):\n        \"\"\"\n        Do HTTP Request\n        \"\"\"\n        start = time.time()\n        if DEBUG:\n            body = json.dumps(data) if data else ''\n            print(\"Shell$ curl -X {method} -d '{body}' '{url}'\".format(\n                method=method.upper(), body=body or '', url=url))\n    \n        if timeout is None:\n            timeout = HTTP_TIMEOUT\n        try:\n            u = urlparse(url)\n            request_session = _requests_session_pool_get(u.scheme, u.netloc)\n            response = request_session.request(method,\n                                               url,\n                                               json=data,\n                                               timeout=timeout)\n        except (requests.ConnectionError, requests.ReadTimeout) as e:\n            raise\n    \n        if response.status_code == 502:  # Bad Gateway\n            raise WDABadGateway(response.status_code, response.text)\n    \n        if DEBUG:\n            ms = (time.time() - start) * 1000\n            response_text = response.text\n            if url.endswith(\"/screenshot\"):\n                response_text = response_text[:100] + \"...\" # limit length of screenshot response\n            print('Return ({:.0f}ms): {}'.format(ms, response_text))\n    \n        try:\n            retjson = response.json()\n            retjson['status'] = retjson.get('status', 0)\n            r = convert(retjson)\n    \n            if isinstance(r.value, dict) and r.value.get(\"error\"):\n                status = Status.ERROR\n                value = r.value.copy()\n                value.pop(\"traceback\", None)\n    \n                for errCls in (WDAInvalidSessionIdError, WDAPossiblyCrashedError, WDAKeyboardNotPresentError, WDAUnknownError, WDAStaleElementReferenceError):\n                    if errCls.check(value):\n>                       raise errCls(status, value)\nE                       wda.exceptions.WDAInvalidSessionIdError: WDARequestError(status=110, value={'error': 'invalid session id', 'message': 'Session does not exist'})\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:180: WDAInvalidSessionIdError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <wda.Client object at 0x109f159a0>, method = 'POST', urlpath = '/wda/apps/terminate', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, with_session = True, timeout = None\n\n    @limit_call_depth(4)\n    def _fetch(self,\n               method: str,\n               urlpath: str,\n               data: Optional[dict] = None,\n               with_session: bool = False,\n               timeout: Optional[float] = None) -> attrdict.AttrDict:\n        \"\"\" do http request \"\"\"\n        urlpath = \"/\" + urlpath.lstrip(\"/\")  # urlpath always startswith /\n    \n        callbacks = self.__callbacks\n    \n        if self.__callback_running:\n            callbacks = None\n    \n        url = urljoin(self.__wda_url, urlpath)\n    \n        run_callback = functools.partial(self._run_callback,\n                                         callbacks=callbacks,\n                                         method=method,\n                                         url=url,\n                                         urlpath=urlpath,\n                                         with_session=with_session,\n                                         data=data,\n                                         client=self)\n    \n        try:\n            if with_session:\n                url = urljoin(self.__wda_url, \"session\", self.session_id,\n                              urlpath)\n            run_callback(Callback.HTTP_REQUEST_BEFORE)\n>           response = httpdo(url, method, data, timeout)\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:454: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http+usbmux://00008030-001024CC0E89802E:8100/session/4464FF9C-A530-4A33-BD50-9A2668F109FD/wda/apps/terminate', method = 'POST', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, timeout = None\n\n    def httpdo(url, method=\"GET\", data=None, timeout=None) -> attrdict.AttrDict:\n        \"\"\"\n        thread safe http request\n    \n        Raises:\n            WDAError, WDARequestError, WDAEmptyResponseError\n        \"\"\"\n        p = urlparse(url)\n        with namedlock(p.scheme + \"://\" + p.netloc):\n>           return _unsafe_httpdo(url, method, data, timeout)\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http+usbmux://00008030-001024CC0E89802E:8100/session/4464FF9C-A530-4A33-BD50-9A2668F109FD/wda/apps/terminate', method = 'POST', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, timeout = 180.0\n\n    def _unsafe_httpdo(url, method='GET', data=None, timeout=None):\n        \"\"\"\n        Do HTTP Request\n        \"\"\"\n        start = time.time()\n        if DEBUG:\n            body = json.dumps(data) if data else ''\n            print(\"Shell$ curl -X {method} -d '{body}' '{url}'\".format(\n                method=method.upper(), body=body or '', url=url))\n    \n        if timeout is None:\n            timeout = HTTP_TIMEOUT\n        try:\n            u = urlparse(url)\n            request_session = _requests_session_pool_get(u.scheme, u.netloc)\n            response = request_session.request(method,\n                                               url,\n                                               json=data,\n                                               timeout=timeout)\n        except (requests.ConnectionError, requests.ReadTimeout) as e:\n            raise\n    \n        if response.status_code == 502:  # Bad Gateway\n            raise WDABadGateway(response.status_code, response.text)\n    \n        if DEBUG:\n            ms = (time.time() - start) * 1000\n            response_text = response.text\n            if url.endswith(\"/screenshot\"):\n                response_text = response_text[:100] + \"...\" # limit length of screenshot response\n            print('Return ({:.0f}ms): {}'.format(ms, response_text))\n    \n        try:\n            retjson = response.json()\n            retjson['status'] = retjson.get('status', 0)\n            r = convert(retjson)\n    \n            if isinstance(r.value, dict) and r.value.get(\"error\"):\n                status = Status.ERROR\n                value = r.value.copy()\n                value.pop(\"traceback\", None)\n    \n                for errCls in (WDAInvalidSessionIdError, WDAPossiblyCrashedError, WDAKeyboardNotPresentError, WDAUnknownError, WDAStaleElementReferenceError):\n                    if errCls.check(value):\n>                       raise errCls(status, value)\nE                       wda.exceptions.WDAInvalidSessionIdError: WDARequestError(status=110, value={'error': 'invalid session id', 'message': 'Session does not exist'})\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:180: WDAInvalidSessionIdError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <wda.Client object at 0x109f159a0>, method = 'POST', urlpath = '/wda/apps/terminate', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, with_session = True, timeout = None\n\n    @limit_call_depth(4)\n    def _fetch(self,\n               method: str,\n               urlpath: str,\n               data: Optional[dict] = None,\n               with_session: bool = False,\n               timeout: Optional[float] = None) -> attrdict.AttrDict:\n        \"\"\" do http request \"\"\"\n        urlpath = \"/\" + urlpath.lstrip(\"/\")  # urlpath always startswith /\n    \n        callbacks = self.__callbacks\n    \n        if self.__callback_running:\n            callbacks = None\n    \n        url = urljoin(self.__wda_url, urlpath)\n    \n        run_callback = functools.partial(self._run_callback,\n                                         callbacks=callbacks,\n                                         method=method,\n                                         url=url,\n                                         urlpath=urlpath,\n                                         with_session=with_session,\n                                         data=data,\n                                         client=self)\n    \n        try:\n            if with_session:\n                url = urljoin(self.__wda_url, \"session\", self.session_id,\n                              urlpath)\n            run_callback(Callback.HTTP_REQUEST_BEFORE)\n>           response = httpdo(url, method, data, timeout)\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:454: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http+usbmux://00008030-001024CC0E89802E:8100/session/4464FF9C-A530-4A33-BD50-9A2668F109FD/wda/apps/terminate', method = 'POST', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, timeout = None\n\n    def httpdo(url, method=\"GET\", data=None, timeout=None) -> attrdict.AttrDict:\n        \"\"\"\n        thread safe http request\n    \n        Raises:\n            WDAError, WDARequestError, WDAEmptyResponseError\n        \"\"\"\n        p = urlparse(url)\n        with namedlock(p.scheme + \"://\" + p.netloc):\n>           return _unsafe_httpdo(url, method, data, timeout)\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http+usbmux://00008030-001024CC0E89802E:8100/session/4464FF9C-A530-4A33-BD50-9A2668F109FD/wda/apps/terminate', method = 'POST', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, timeout = 180.0\n\n    def _unsafe_httpdo(url, method='GET', data=None, timeout=None):\n        \"\"\"\n        Do HTTP Request\n        \"\"\"\n        start = time.time()\n        if DEBUG:\n            body = json.dumps(data) if data else ''\n            print(\"Shell$ curl -X {method} -d '{body}' '{url}'\".format(\n                method=method.upper(), body=body or '', url=url))\n    \n        if timeout is None:\n            timeout = HTTP_TIMEOUT\n        try:\n            u = urlparse(url)\n            request_session = _requests_session_pool_get(u.scheme, u.netloc)\n            response = request_session.request(method,\n                                               url,\n                                               json=data,\n                                               timeout=timeout)\n        except (requests.ConnectionError, requests.ReadTimeout) as e:\n            raise\n    \n        if response.status_code == 502:  # Bad Gateway\n            raise WDABadGateway(response.status_code, response.text)\n    \n        if DEBUG:\n            ms = (time.time() - start) * 1000\n            response_text = response.text\n            if url.endswith(\"/screenshot\"):\n                response_text = response_text[:100] + \"...\" # limit length of screenshot response\n            print('Return ({:.0f}ms): {}'.format(ms, response_text))\n    \n        try:\n            retjson = response.json()\n            retjson['status'] = retjson.get('status', 0)\n            r = convert(retjson)\n    \n            if isinstance(r.value, dict) and r.value.get(\"error\"):\n                status = Status.ERROR\n                value = r.value.copy()\n                value.pop(\"traceback\", None)\n    \n                for errCls in (WDAInvalidSessionIdError, WDAPossiblyCrashedError, WDAKeyboardNotPresentError, WDAUnknownError, WDAStaleElementReferenceError):\n                    if errCls.check(value):\n>                       raise errCls(status, value)\nE                       wda.exceptions.WDAInvalidSessionIdError: WDARequestError(status=110, value={'error': 'invalid session id', 'message': 'Session does not exist'})\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:180: WDAInvalidSessionIdError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <wda.Client object at 0x109f159a0>, method = 'POST', urlpath = '/wda/apps/terminate', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, with_session = True, timeout = None\n\n    @limit_call_depth(4)\n    def _fetch(self,\n               method: str,\n               urlpath: str,\n               data: Optional[dict] = None,\n               with_session: bool = False,\n               timeout: Optional[float] = None) -> attrdict.AttrDict:\n        \"\"\" do http request \"\"\"\n        urlpath = \"/\" + urlpath.lstrip(\"/\")  # urlpath always startswith /\n    \n        callbacks = self.__callbacks\n    \n        if self.__callback_running:\n            callbacks = None\n    \n        url = urljoin(self.__wda_url, urlpath)\n    \n        run_callback = functools.partial(self._run_callback,\n                                         callbacks=callbacks,\n                                         method=method,\n                                         url=url,\n                                         urlpath=urlpath,\n                                         with_session=with_session,\n                                         data=data,\n                                         client=self)\n    \n        try:\n            if with_session:\n                url = urljoin(self.__wda_url, \"session\", self.session_id,\n                              urlpath)\n            run_callback(Callback.HTTP_REQUEST_BEFORE)\n>           response = httpdo(url, method, data, timeout)\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:454: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http+usbmux://00008030-001024CC0E89802E:8100/session/4464FF9C-A530-4A33-BD50-9A2668F109FD/wda/apps/terminate', method = 'POST', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, timeout = None\n\n    def httpdo(url, method=\"GET\", data=None, timeout=None) -> attrdict.AttrDict:\n        \"\"\"\n        thread safe http request\n    \n        Raises:\n            WDAError, WDARequestError, WDAEmptyResponseError\n        \"\"\"\n        p = urlparse(url)\n        with namedlock(p.scheme + \"://\" + p.netloc):\n>           return _unsafe_httpdo(url, method, data, timeout)\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http+usbmux://00008030-001024CC0E89802E:8100/session/4464FF9C-A530-4A33-BD50-9A2668F109FD/wda/apps/terminate', method = 'POST', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, timeout = 180.0\n\n    def _unsafe_httpdo(url, method='GET', data=None, timeout=None):\n        \"\"\"\n        Do HTTP Request\n        \"\"\"\n        start = time.time()\n        if DEBUG:\n            body = json.dumps(data) if data else ''\n            print(\"Shell$ curl -X {method} -d '{body}' '{url}'\".format(\n                method=method.upper(), body=body or '', url=url))\n    \n        if timeout is None:\n            timeout = HTTP_TIMEOUT\n        try:\n            u = urlparse(url)\n            request_session = _requests_session_pool_get(u.scheme, u.netloc)\n            response = request_session.request(method,\n                                               url,\n                                               json=data,\n                                               timeout=timeout)\n        except (requests.ConnectionError, requests.ReadTimeout) as e:\n            raise\n    \n        if response.status_code == 502:  # Bad Gateway\n            raise WDABadGateway(response.status_code, response.text)\n    \n        if DEBUG:\n            ms = (time.time() - start) * 1000\n            response_text = response.text\n            if url.endswith(\"/screenshot\"):\n                response_text = response_text[:100] + \"...\" # limit length of screenshot response\n            print('Return ({:.0f}ms): {}'.format(ms, response_text))\n    \n        try:\n            retjson = response.json()\n            retjson['status'] = retjson.get('status', 0)\n            r = convert(retjson)\n    \n            if isinstance(r.value, dict) and r.value.get(\"error\"):\n                status = Status.ERROR\n                value = r.value.copy()\n                value.pop(\"traceback\", None)\n    \n                for errCls in (WDAInvalidSessionIdError, WDAPossiblyCrashedError, WDAKeyboardNotPresentError, WDAUnknownError, WDAStaleElementReferenceError):\n                    if errCls.check(value):\n>                       raise errCls(status, value)\nE                       wda.exceptions.WDAInvalidSessionIdError: WDARequestError(status=110, value={'error': 'invalid session id', 'message': 'Session does not exist'})\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:180: WDAInvalidSessionIdError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <wda.Client object at 0x109f159a0>, method = 'POST', urlpath = '/wda/apps/terminate', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, with_session = True, timeout = None\n\n    @limit_call_depth(4)\n    def _fetch(self,\n               method: str,\n               urlpath: str,\n               data: Optional[dict] = None,\n               with_session: bool = False,\n               timeout: Optional[float] = None) -> attrdict.AttrDict:\n        \"\"\" do http request \"\"\"\n        urlpath = \"/\" + urlpath.lstrip(\"/\")  # urlpath always startswith /\n    \n        callbacks = self.__callbacks\n    \n        if self.__callback_running:\n            callbacks = None\n    \n        url = urljoin(self.__wda_url, urlpath)\n    \n        run_callback = functools.partial(self._run_callback,\n                                         callbacks=callbacks,\n                                         method=method,\n                                         url=url,\n                                         urlpath=urlpath,\n                                         with_session=with_session,\n                                         data=data,\n                                         client=self)\n    \n        try:\n            if with_session:\n                url = urljoin(self.__wda_url, \"session\", self.session_id,\n                              urlpath)\n            run_callback(Callback.HTTP_REQUEST_BEFORE)\n>           response = httpdo(url, method, data, timeout)\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:454: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http+usbmux://00008030-001024CC0E89802E:8100/session/4464FF9C-A530-4A33-BD50-9A2668F109FD/wda/apps/terminate', method = 'POST', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, timeout = None\n\n    def httpdo(url, method=\"GET\", data=None, timeout=None) -> attrdict.AttrDict:\n        \"\"\"\n        thread safe http request\n    \n        Raises:\n            WDAError, WDARequestError, WDAEmptyResponseError\n        \"\"\"\n        p = urlparse(url)\n        with namedlock(p.scheme + \"://\" + p.netloc):\n>           return _unsafe_httpdo(url, method, data, timeout)\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http+usbmux://00008030-001024CC0E89802E:8100/session/4464FF9C-A530-4A33-BD50-9A2668F109FD/wda/apps/terminate', method = 'POST', data = {'bundleId': 'com.kwai.videoeditor.beta1'}, timeout = 180.0\n\n    def _unsafe_httpdo(url, method='GET', data=None, timeout=None):\n        \"\"\"\n        Do HTTP Request\n        \"\"\"\n        start = time.time()\n        if DEBUG:\n            body = json.dumps(data) if data else ''\n            print(\"Shell$ curl -X {method} -d '{body}' '{url}'\".format(\n                method=method.upper(), body=body or '', url=url))\n    \n        if timeout is None:\n            timeout = HTTP_TIMEOUT\n        try:\n            u = urlparse(url)\n            request_session = _requests_session_pool_get(u.scheme, u.netloc)\n            response = request_session.request(method,\n                                               url,\n                                               json=data,\n                                               timeout=timeout)\n        except (requests.ConnectionError, requests.ReadTimeout) as e:\n            raise\n    \n        if response.status_code == 502:  # Bad Gateway\n            raise WDABadGateway(response.status_code, response.text)\n    \n        if DEBUG:\n            ms = (time.time() - start) * 1000\n            response_text = response.text\n            if url.endswith(\"/screenshot\"):\n                response_text = response_text[:100] + \"...\" # limit length of screenshot response\n            print('Return ({:.0f}ms): {}'.format(ms, response_text))\n    \n        try:\n            retjson = response.json()\n            retjson['status'] = retjson.get('status', 0)\n            r = convert(retjson)\n    \n            if isinstance(r.value, dict) and r.value.get(\"error\"):\n                status = Status.ERROR\n                value = r.value.copy()\n                value.pop(\"traceback\", None)\n    \n                for errCls in (WDAInvalidSessionIdError, WDAPossiblyCrashedError, WDAKeyboardNotPresentError, WDAUnknownError, WDAStaleElementReferenceError):\n                    if errCls.check(value):\n>                       raise errCls(status, value)\nE                       wda.exceptions.WDAInvalidSessionIdError: WDARequestError(status=110, value={'error': 'invalid session id', 'message': 'Session does not exist'})\n\nvenv/lib/python3.8/site-packages/wda/__init__.py:180: WDAInvalidSessionIdError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <allure_commons._allure.fixture object at 0x109f15d30>, args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\nvenv/lib/python3.8/site-packages/allure_commons/_allure.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncase/ios/__init__.py:18: in teardown_method\n    self.s.app_terminate(self.app_name)\nvenv/lib/python3.8/site-packages/wda/__init__.py:821: in app_terminate\n    return self._session_http.post(\"/wda/apps/terminate\", {\nvenv/lib/python3.8/site-packages/wda/utils.py:47: in _inner\n    return fn(*args, **kwargs)\nvenv/lib/python3.8/site-packages/wda/__init__.py:460: in _fetch\n    return self._fetch(method, urlpath, data, with_session)\nvenv/lib/python3.8/site-packages/wda/utils.py:47: in _inner\n    return fn(*args, **kwargs)\nvenv/lib/python3.8/site-packages/wda/__init__.py:460: in _fetch\n    return self._fetch(method, urlpath, data, with_session)\nvenv/lib/python3.8/site-packages/wda/utils.py:47: in _inner\n    return fn(*args, **kwargs)\nvenv/lib/python3.8/site-packages/wda/__init__.py:460: in _fetch\n    return self._fetch(method, urlpath, data, with_session)\nvenv/lib/python3.8/site-packages/wda/utils.py:47: in _inner\n    return fn(*args, **kwargs)\nvenv/lib/python3.8/site-packages/wda/__init__.py:460: in _fetch\n    return self._fetch(method, urlpath, data, with_session)\nvenv/lib/python3.8/site-packages/wda/utils.py:47: in _inner\n    return fn(*args, **kwargs)\nvenv/lib/python3.8/site-packages/wda/__init__.py:460: in _fetch\n    return self._fetch(method, urlpath, data, with_session)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (<wda.Client object at 0x109f159a0>, 'POST', '/wda/apps/terminate', {'bundleId': 'com.kwai.videoeditor.beta1'}, True), kwargs = {}\n\n    @functools.wraps(fn)\n    def _inner(*args, **kwargs):\n        if fn._depth > n:\n>           raise RuntimeError(\"call depth exceed %d\" % n)\nE           RuntimeError: call depth exceed 4\n\nvenv/lib/python3.8/site-packages/wda/utils.py:43: RuntimeError"}, "attachments": [{"name": "log", "source": "31408bb2-f3a1-4a28-a6f5-73a2885d6858-attachment.txt", "type": "text/plain"}], "start": 1612332866352, "stop": 1612332879182, "uuid": "8d2e5a34-59d9-401a-9804-e7b56cb7a170", "historyId": "001418536c42997facca73c08a9f175b", "testCaseId": "ca037191ba518949a4e6a7a42ecbf423", "fullName": "case.ios.test_ios_sample.TestIosSample#test_case01", "labels": [{"name": "parentSuite", "value": "case.ios"}, {"name": "suite", "value": "test_ios_sample"}, {"name": "subSuite", "value": "TestIosSample"}, {"name": "host", "value": "yangkang.local"}, {"name": "thread", "value": "33985-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.ios.test_ios_sample"}]}